import { MigrationInterface, QueryRunner } from "typeorm";

export class initDatabase1704822851109 implements MigrationInterface {
    name = 'initDatabase1704822851109'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "translations" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "fr" text, "en" text, CONSTRAINT "PK_aca248c72ae1fb2390f1bf4cd87" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "public"."parameter_categories_code_enum" AS ENUM()`);
        await queryRunner.query(`CREATE TABLE "parameter_categories" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "code" "public"."parameter_categories_code_enum", "label_id" integer NOT NULL, CONSTRAINT "PK_e975b88096f8d8b38b90e1a031b" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "parameters" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "logical_value" character varying(255), "label_id" integer, "category_id" integer, CONSTRAINT "UQ_1c154106c420a9c825995fcc22b" UNIQUE ("logical_value"), CONSTRAINT "PK_6b03a26baa3161f87fa87588859" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "repositories" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "name" character varying(255) NOT NULL, "url" character varying(255) NOT NULL, CONSTRAINT "PK_ef0c358c04b4f4d29b8ca68ddff" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "repository_api_keys" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "api_key" character varying(255) NOT NULL, "expiration_date" TIMESTAMP, "last_access_date" TIMESTAMP, "repository_id" integer NOT NULL, CONSTRAINT "UQ_7a288abea0c822e0c11e2ad029f" UNIQUE ("api_key"), CONSTRAINT "PK_82292108551b9ca64d3f9c9f97f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "public"."roles_role_enum" AS ENUM('admin', 'developer')`);
        await queryRunner.query(`CREATE TABLE "roles" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "role" "public"."roles_role_enum" NOT NULL, "label_id" integer NOT NULL, CONSTRAINT "UQ_ccc7c1489f3a6b3c9b47d4537c5" UNIQUE ("role"), CONSTRAINT "PK_c1433d71a4838793a49dcad46ab" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "users" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "email" character varying(255) NOT NULL, "password" character varying(255) NOT NULL, "active" boolean NOT NULL DEFAULT true, "role_id" integer NOT NULL, CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email"), CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY ("id"))`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "UQ_1c154106c420a9c825995fcc22b"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "logical_value"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "label_id"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "category_id"`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "logical_value" character varying(255)`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "UQ_1c154106c420a9c825995fcc22b" UNIQUE ("logical_value")`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "label_id" integer`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "category_id" integer`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "end_date" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "repository_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "user_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "parameter_categories" ADD CONSTRAINT "FK_9bb03f5b061bbec2f0c012fcaca" FOREIGN KEY ("label_id") REFERENCES "translations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "FK_d4bda51d428937153bd55518d5d" FOREIGN KEY ("label_id") REFERENCES "translations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "FK_dddcb3c7922554835b8fc0dd297" FOREIGN KEY ("category_id") REFERENCES "parameter_categories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "repository_api_keys" ADD CONSTRAINT "FK_8d5fe445057ed0eb38d529d474d" FOREIGN KEY ("repository_id") REFERENCES "repositories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "roles" ADD CONSTRAINT "FK_fdf1ca0c37659d1195ff67d11b7" FOREIGN KEY ("label_id") REFERENCES "translations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "FK_a2cecd1a3531c0b041e29ba46e1" FOREIGN KEY ("role_id") REFERENCES "roles"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "FK_ac32c4c122b3f83080971aec432" FOREIGN KEY ("repository_id") REFERENCES "repositories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "FK_f1c30aa997df5e66a89b79a3bc4" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "FK_f1c30aa997df5e66a89b79a3bc4"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "FK_ac32c4c122b3f83080971aec432"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "FK_a2cecd1a3531c0b041e29ba46e1"`);
        await queryRunner.query(`ALTER TABLE "roles" DROP CONSTRAINT "FK_fdf1ca0c37659d1195ff67d11b7"`);
        await queryRunner.query(`ALTER TABLE "repository_api_keys" DROP CONSTRAINT "FK_8d5fe445057ed0eb38d529d474d"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "FK_dddcb3c7922554835b8fc0dd297"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "FK_d4bda51d428937153bd55518d5d"`);
        await queryRunner.query(`ALTER TABLE "parameter_categories" DROP CONSTRAINT "FK_9bb03f5b061bbec2f0c012fcaca"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "repository_id"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "end_date"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "category_id"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "label_id"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "UQ_1c154106c420a9c825995fcc22b"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP COLUMN "logical_value"`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "category_id" integer`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "label_id" integer`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD "logical_value" character varying(255)`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "UQ_1c154106c420a9c825995fcc22b" UNIQUE ("logical_value")`);
        await queryRunner.query(`DROP TABLE "users"`);
        await queryRunner.query(`DROP TABLE "roles"`);
        await queryRunner.query(`DROP TYPE "public"."roles_role_enum"`);
        await queryRunner.query(`DROP TABLE "repository_api_keys"`);
        await queryRunner.query(`DROP TABLE "repositories"`);
        await queryRunner.query(`DROP TABLE "parameters"`);
        await queryRunner.query(`DROP TABLE "parameter_categories"`);
        await queryRunner.query(`DROP TYPE "public"."parameter_categories_code_enum"`);
        await queryRunner.query(`DROP TABLE "translations"`);
    }

}
