import { MigrationInterface, QueryRunner } from "typeorm";

export class initDatabase1707659432791 implements MigrationInterface {
    name = 'initDatabase1707659432791'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "repositories" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "name" character varying(255) NOT NULL, "url" character varying(255) NOT NULL, CONSTRAINT "PK_ef0c358c04b4f4d29b8ca68ddff" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "pipelines" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "uuid" uuid NOT NULL DEFAULT uuid_generate_v4(), "repository_id" integer NOT NULL, CONSTRAINT "UQ_560c85289af58f2e811e855f1bf" UNIQUE ("uuid"), CONSTRAINT "PK_e38ea171cdfad107c1f3db2c036" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "repository_api_keys" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "api_key" uuid NOT NULL DEFAULT uuid_generate_v4(), "expiration_date" TIMESTAMP, "last_access_date" TIMESTAMP, "repository_id" integer NOT NULL, CONSTRAINT "UQ_7a288abea0c822e0c11e2ad029f" UNIQUE ("api_key"), CONSTRAINT "PK_82292108551b9ca64d3f9c9f97f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "translations" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "fr" text, "en" text, CONSTRAINT "PK_aca248c72ae1fb2390f1bf4cd87" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "public"."roles_role_enum" AS ENUM('admin', 'developer')`);
        await queryRunner.query(`CREATE TABLE "roles" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "role" "public"."roles_role_enum" NOT NULL, "label_id" integer NOT NULL, CONSTRAINT "UQ_ccc7c1489f3a6b3c9b47d4537c5" UNIQUE ("role"), CONSTRAINT "PK_c1433d71a4838793a49dcad46ab" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "test_classes" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "scaffolding" boolean NOT NULL DEFAULT false, "source_code" text NOT NULL, "validated" boolean NOT NULL DEFAULT false, "scaffolding_class_id" integer, "pipeline_id" integer NOT NULL, CONSTRAINT "PK_0545b4004a3b0324dc166082c2b" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "test_methods" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "row" integer NOT NULL, "rows" integer NOT NULL, "validated" boolean NOT NULL DEFAULT false, "test_class_id" integer NOT NULL, CONSTRAINT "PK_b3044c18606c9b486b5226ac535" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "users" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "email" character varying(255) NOT NULL, "password" character varying(255) NOT NULL, "active" boolean NOT NULL DEFAULT true, "role_id" integer NOT NULL, CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email"), CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "parameters" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "end_date" TIMESTAMP, "repository_id" integer NOT NULL, "user_id" integer NOT NULL, CONSTRAINT "PK_6b03a26baa3161f87fa87588859" PRIMARY KEY ("id"))`);
        await queryRunner.query(`ALTER TABLE "pipelines" ADD CONSTRAINT "FK_486381c8c497be9e96497c049bf" FOREIGN KEY ("repository_id") REFERENCES "repositories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "repository_api_keys" ADD CONSTRAINT "FK_8d5fe445057ed0eb38d529d474d" FOREIGN KEY ("repository_id") REFERENCES "repositories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "roles" ADD CONSTRAINT "FK_fdf1ca0c37659d1195ff67d11b7" FOREIGN KEY ("label_id") REFERENCES "translations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "test_classes" ADD CONSTRAINT "FK_c06978826b9426582bdca202644" FOREIGN KEY ("scaffolding_class_id") REFERENCES "test_classes"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "test_classes" ADD CONSTRAINT "FK_0ea23f1eedb4c83c4bcec3e2d26" FOREIGN KEY ("pipeline_id") REFERENCES "pipelines"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "test_methods" ADD CONSTRAINT "FK_7492da6e169720ac8d53d86791e" FOREIGN KEY ("test_class_id") REFERENCES "test_classes"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "FK_a2cecd1a3531c0b041e29ba46e1" FOREIGN KEY ("role_id") REFERENCES "roles"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "FK_ac32c4c122b3f83080971aec432" FOREIGN KEY ("repository_id") REFERENCES "repositories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "parameters" ADD CONSTRAINT "FK_f1c30aa997df5e66a89b79a3bc4" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "FK_f1c30aa997df5e66a89b79a3bc4"`);
        await queryRunner.query(`ALTER TABLE "parameters" DROP CONSTRAINT "FK_ac32c4c122b3f83080971aec432"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "FK_a2cecd1a3531c0b041e29ba46e1"`);
        await queryRunner.query(`ALTER TABLE "test_methods" DROP CONSTRAINT "FK_7492da6e169720ac8d53d86791e"`);
        await queryRunner.query(`ALTER TABLE "test_classes" DROP CONSTRAINT "FK_0ea23f1eedb4c83c4bcec3e2d26"`);
        await queryRunner.query(`ALTER TABLE "test_classes" DROP CONSTRAINT "FK_c06978826b9426582bdca202644"`);
        await queryRunner.query(`ALTER TABLE "roles" DROP CONSTRAINT "FK_fdf1ca0c37659d1195ff67d11b7"`);
        await queryRunner.query(`ALTER TABLE "repository_api_keys" DROP CONSTRAINT "FK_8d5fe445057ed0eb38d529d474d"`);
        await queryRunner.query(`ALTER TABLE "pipelines" DROP CONSTRAINT "FK_486381c8c497be9e96497c049bf"`);
        await queryRunner.query(`DROP TABLE "parameters"`);
        await queryRunner.query(`DROP TABLE "users"`);
        await queryRunner.query(`DROP TABLE "test_methods"`);
        await queryRunner.query(`DROP TABLE "test_classes"`);
        await queryRunner.query(`DROP TABLE "roles"`);
        await queryRunner.query(`DROP TYPE "public"."roles_role_enum"`);
        await queryRunner.query(`DROP TABLE "translations"`);
        await queryRunner.query(`DROP TABLE "repository_api_keys"`);
        await queryRunner.query(`DROP TABLE "pipelines"`);
        await queryRunner.query(`DROP TABLE "repositories"`);
    }

}
